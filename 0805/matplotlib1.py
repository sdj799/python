# Matplotlib 기초 강의 자료
# 파이썬의 대표적인 데이터 시각화 라이브러리
# "그림으로 데이터를 말하게 하는" 도구

# 주요 특징:
# - 다양한 그래프 유형: 선, 막대, 히스토그램, 산점도 등 50가지 이상
# - 고도의 커스터마이징: 색상, 스타일, 레이아웃을 자유자재로 조정
# - 다른 라이브러리와 호환: NumPy, Pandas와 완벽 연동

import matplotlib.pyplot as plt  # 그래프 그리기 위한 pyplot 모듈
import numpy as np               # 수치 계산을 위한 NumPy

# ============================================================================
# 1. 한글 폰트 설정 (한글 깨짐 방지)
# ============================================================================
# matplotlib의 전역 설정을 담당하는 rcParams 딕셔너리 사용
plt.rcParams['font.family'] = ['DejaVu Sans', 'Malgun Gothic']  # 폰트 우선순위 설정
plt.rcParams['axes.unicode_minus'] = False  # 마이너스(-) 기호 깨짐 방지

# 💡 rcParams 설명:
# - matplotlib의 전역 설정을 변경하는 딕셔너리
# - 한 번 설정하면 이후 모든 그래프에 적용됨
# - 폰트, 색상, 크기 등 다양한 속성을 미리 설정 가능

print("=== Matplotlib 기본 사용법 ===")

# ============================================================================
# 2. 기본 데이터 준비
# ============================================================================
x = [1, 2, 3, 4, 5]      # x축 데이터 (가로축, 독립변수)
y = [2, 4, 6, 8, 10]     # y축 데이터 (세로축, 종속변수)

print(f"x 데이터: {x}")
print(f"y 데이터: {y}")
print()

# 💡 데이터 형식 지원:
# matplotlib는 리스트, NumPy 배열, Pandas Series 등 다양한 데이터 형식을 지원합니다.

print("=== 기본 선 그래프 ===")

# ============================================================================
# 3. 기본 선 그래프 그리기
# ============================================================================

# 새로운 그래프 창 생성
plt.figure(figsize=(10, 6))  # figsize=(가로, 세로) 인치 단위로 크기 설정

# 첫 번째 서브플롯 (2행 2열 중 1번째 위치)
plt.subplot(2, 2, 1)  # (행 개수, 열 개수, 현재 위치)

# 선 그래프 그리기 - 축약 표기법 사용
plt.plot(x, y, 'ro--')  # r(빨강) + o(원형 마커) + --(점선)

# 💡 plot() 함수의 축약 표기법:
# 색상: 'r'(빨강), 'b'(파랑), 'g'(초록), 'k'(검정), 'c'(청록), 'm'(자홍), 'y'(노랑)
# 마커: 'o'(원), 's'(사각형), '^'(삼각형), '*'(별), '+'(플러스), 'x'(엑스)
# 선 스타일: '-'(실선), '--'(점선), ':'(점점선), '-.'(일점쇄선)

plt.title('첫 번째 그래프')     # 그래프 제목 설정
plt.xlabel('x축 라벨')        # x축 라벨 설정
plt.ylabel('y축 라벨')        # y축 라벨 설정
plt.grid(True, alpha=0.3)     # 격자 표시 (alpha: 투명도 0~1, 0=투명, 1=불투명)

# 두 번째 서브플롯 (2행 2열 중 2번째 위치)
plt.subplot(2, 2, 2)

# 선 그래프 그리기 - 개별 옵션 설정 방법
plt.plot(x, y,
         marker='o',          # 마커 모양
         markersize=8,        # 마커 크기
         linewidth=3,         # 선 두께
         color='blue')        # 색상 (영어명 또는 #헥스코드 사용 가능)

plt.title('두 번째 그래프')
plt.xlabel('x축')
plt.ylabel('y축')
plt.grid(True, alpha=0.3)

# 그래프들 간의 간격 자동 조정 (겹침 방지)
plt.tight_layout()  # 서브플롯들이 겹치지 않도록 자동으로 여백 조정

# 💡 subplot()과 tight_layout() 설명:
# - subplot(): 하나의 창에 여러 그래프를 배치할 때 사용
# - tight_layout(): 제목, 라벨 등이 겹치지 않도록 자동으로 여백 조정

# 그래프 화면에 표시
plt.show()

print("\n" + "="*50)
print("다양한 그래프 스타일과 커스터마이징")
print("="*50)

# ============================================================================
# 4. 고급 그래프 스타일링
# ============================================================================

# NumPy를 사용한 연속적인 데이터 생성
x_data = np.linspace(0, 10, 50)  # 0부터 10까지 50개의 균등한 간격으로 분할
y1 = np.sin(x_data)              # 사인 함수
y2 = np.cos(x_data)              # 코사인 함수

# 💡 np.linspace() 설명:
# - 시작값부터 끝값까지 지정된 개수만큼 균등하게 분할한 배열을 생성
# - 매끄러운 곡선을 그릴 때 유용

# 큰 그래프 창 생성 (2행 3열 레이아웃)
plt.figure(figsize=(12, 8))

# ============================================================================
# 4-1. 다양한 선 스타일 (첫 번째 서브플롯)
# ============================================================================
plt.subplot(2, 3, 1)
plt.plot(x_data, y1, 'b-', label='sin(x)', linewidth=2)    # 파란색 실선
plt.plot(x_data, y2, 'r--', label='cos(x)', linewidth=2)   # 빨간색 점선

plt.title('다양한 선 스타일')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()              # 범례 표시 (label 매개변수로 지정한 텍스트 표시)
plt.grid(True, alpha=0.5)  # 격자 표시 (투명도 50%)

# ============================================================================
# 4-2. 마커 스타일 (두 번째 서브플롯)
# ============================================================================
plt.subplot(2, 3, 2)
x_simple = [1, 2, 3, 4, 5]  # 간단한 데이터
y_simple = [1, 4, 2, 3, 5]

plt.plot(x_simple, y_simple, 'go-',    # 초록색 원형 마커 + 실선
         markersize=10,                 # 마커 크기
         linewidth=2)                   # 선 두께

plt.title('마커 스타일')
plt.xlabel('x')
plt.ylabel('y')
plt.grid(True, alpha=0.5)

# ============================================================================
# 4-3. 색상 커스터마이징 (세 번째 서브플롯)
# ============================================================================
plt.subplot(2, 3, 3)
# 헥스 색상 코드 사용 (#RRGGBB 형식)
plt.plot(x_data, y1, color="#476a8d",  linewidth=3, label='사용자 정의 색상')
plt.plot(x_data, y2, color="#a9a345",  linewidth=3, alpha=0.7, label='노랑색')

# 💡 색상 지정 방법:
# 1. 영어명: 'red', 'blue', 'green' 등
# 2. 축약형: 'r', 'b', 'g' 등
# 3. 헥스 코드: '#FF0000', '#0000FF' 등
# 4. RGB 튜플: (1.0, 0.0, 0.0) 등 (0~1 범위)

plt.title('색상 커스터마이징')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()

# ============================================================================
# 4-4. 축 범위 설정 (네 번째 서브플롯)
# ============================================================================
plt.subplot(2, 3, 4)
plt.plot(x_data, y1, 'b-', linewidth=2)

plt.title('축 범위 설정')
plt.xlabel('x')
plt.ylabel('y')
plt.xlim(2, 8)        # x축 범위를 2~8로 제한
plt.ylim(-0.5, 0.5)   # y축 범위를 -0.5~0.5로 제한

# 💡 축 범위 설정 함수:
# - xlim(최솟값, 최댓값): x축 범위 설정
# - ylim(최솟값, 최댓값): y축 범위 설정

# ============================================================================
# 4-5. 영역 채우기 (다섯 번째 서브플롯)
# ============================================================================
plt.subplot(2, 3, 5)
plt.plot(x_data, y1, 'b-', linewidth=2)
plt.fill_between(x_data, y1, alpha=0.3, color='blue')   # sin 곡선 아래 영역 채우기

plt.plot(x_data, y2, 'r--', linewidth=2)
plt.fill_between(x_data, y2, alpha=0.3, color='red')    # cos 곡선 아래 영역 채우기

# 💡 fill_between() 설명:
# - 지정된 곡선과 x축 사이의 영역을 색으로 채움
# - alpha 매개변수로 투명도 조절 (0=완전투명, 1=불투명)

plt.title('영역 채우기')
plt.xlabel('x')
plt.ylabel('y')

# 모든 서브플롯의 레이아웃 자동 조정
plt.tight_layout()
plt.show()

# ============================================================================
# 5. 연습 문제
# ============================================================================
print("==== 연습 문제 ====")
print("1부터 10까지 숫자의 제곱값을 그래프로 표현해보세요!")

# 연습 문제 데이터
x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]        # 1부터 10까지의 숫자
y = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]  # 각 숫자의 제곱값

# 연습 문제 해답
plt.figure(figsize=(8, 6))  # 그래프 크기 설정

plt.plot(x, y,
         color='red',       # 빨간색 선
         marker='o',        # 원형 마커
         markersize=8,      # 마커 크기
         linewidth=2)       # 선 두께

plt.grid(True, alpha=0.3)           # 격자 표시
plt.title('1부터 10까지의 제곱값')    # 제목
plt.xlabel('숫자')                  # x축 라벨
plt.ylabel('제곱값')                # y축 라벨

# 💡 추가 팁:
# - 제곱 관계는 포물선(이차함수) 형태로 나타남
# - 마커를 사용하면 각 데이터 포인트를 명확히 구분할 수 있음

plt.show()

print("\n=== 학습 요약 ===")
print("1. plt.figure(): 그래프 창 생성 및 크기 설정")
print("2. plt.subplot(): 여러 그래프를 하나의 창에 배치")
print("3. plt.plot(): 선 그래프 그리기 (다양한 스타일 옵션)")
print("4. plt.title(), plt.xlabel(), plt.ylabel(): 제목과 축 라벨 설정")
print("5. plt.legend(): 범례 표시")
print("6. plt.grid(): 격자 표시")
print("7. plt.xlim(), plt.ylim(): 축 범위 설정")
print("8. plt.fill_between(): 영역 채우기")
print("9. plt.tight_layout(): 레이아웃 자동 조정")
print("10. plt.show(): 그래프 화면에 표시")